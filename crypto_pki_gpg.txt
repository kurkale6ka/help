                                      PKI
                           Public Key Infrastructure
                           =========================

Public Key -> CA (sign key) -> digital certificate (PK ownership garanteed)

Note about ssh:
server cert ok => server is who it claims to be -> put PK in ~/.known_hosts

Note: public key certificate == digital certificate

CA - certificate authority:
---------------------------
Issues digital certificates certifying the ownership of a public key
It uses a digital signature to bind a public key with an identity

Ex: AAAAB3NzaC1yc2EAAAADA + mitko is RELIABLE

Note: a CA is identified by its own self-signed certificate

Note: The CA certificates of many well known and trusted CA companies already
      come installed on your PC as part of your Web browser installation. So if
      one of these CAs has signed the certificate presented by a web server, you
      can trust it to encrypt your communication (ex: payment via web browser)

Scenario: User sends CSR (certificate signing request) to CA, then CA creates
          the digital certificate

Digital signature:
------------------
In public-key systems integrity is guaranteed by using digital signatures. A
digital signature is a message digest which is attached to a message and which
can be used to find out if the message was tampered with during the
conversation. Even the slightest change in the message produces a different
digest. The message digest is encrypted using the sender's private key. The
receiver uses the same message digest algorithm used by the sender to generate
a message digest of the received message.

http://gdp.globus.org/gt4-tutorial/multiplehtml/ch09s03.html

Asymmetric key algorithms: the key used to encrypt a message is not the same as
                           the key used to decrypt it

Gpg
===

1. Generate key pair
--------------------
gpg --gen-key
   * length   : 2048
   * validity : 1y
   * comment  : nickname - work key

2. Make key publicly visible
----------------------------
gpg --keyserver pgp.mit.edu --send-keys 48867B54
gpg --keyserver pgp.mit.edu --search-keys kurkale6ka # or check online: http://pgp.mit.edu/pks/lookup?search=kurkale6ka&op=vindex

3. Use a web of trust (as opposed to CA in PKI world)
-----------------------------------------------------
# Validate a key:
# Your correspondent:
gpg --fingerprint 160C6FA8

# You:
gpg --edit-key 160C6FA8
gpg> fpr # to view its fingerprint
gpg> sign # if fingerprints match
gpg> check

4. Setup Thunderbird / sparrow / mutt to use gpg
------------------------------------------------

Tips:
-----

# List key IDs on one's public keyring as used above
gpg --list-keys

# Encrypt a file with multiple recipients
gpg -ae -r 48867B54 -r 160C6FA8 -o aliases.test.txt aliases.test

# Manually export / import a key
# This is achieved in one go with --send-keys / --search-keys
* gpg -a -o pubkey.txt --export 'Dimitar Dimitrov'
* send it to your correspondant
* He can import it with: gpg --import pubkey.txt
