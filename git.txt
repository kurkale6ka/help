                                      Git

Everything tracked is in your staging area - the index.

git rm
------
    removes from both the index and the working copy

git rm --cached
    removes from the index only => untracks the file!

git commit --amend
------------------
    change the message of the previous commit + add any staged files

git reset
---------
HEAD    ⇒  Index    ⇒  Working dir
move       copy to     copy to
--soft     --mixed     --hard

git reset
    unstage all files
git reset file
    unstage file (opposite of git add file)
git reset --hard
    unstage everything + reset working dir
git reset HEAD~
    undo previous commit (move branch) + unstage everything

git config
----------
git config --global user.name 'Dimitar Dimitrov'
git config --global user.email mitkofr@yahoo.fr

git config --global core.excludesfile "$HOME"/.gitignore
git config --global core.editor "vim -u $HOME/.vimrc"
git config --global color.ui true

# make 'git pull' on master always use rebase
# git config branch.master.rebase true

# setup rebase for every tracking branch
git config --global branch.autosetuprebase always

git config --global diff.tool vimdiff
git config --global difftool.prompt false

git config --global alias.d difftool
git config --global alias.df diff
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.msg 'log -1 --pretty=\%B'
git config --global pager.msg false
git config --global alias.sha "rev-parse HEAD"
git config --global alias.st status
git config --global alias.br branch
git config --global alias.l "log --date=short --pretty=format:'%C(yellow)%h%C(reset) %C(green)%ad%C(reset) %C(blue)%an%C(reset) | %s %C(red)%d%C(reset)'"
git config --global alias.lg "log --graph --date=short --pretty=format:'%C(yellow)%h%C(reset) %C(green)%ad%C(reset) %C(blue)%an%C(reset) | %s %C(red)%d%C(reset)'"
git config --global alias.type cat-file -t
git config --global alias.dump cat-file -p

alias gc='git commit -v'
alias gp='git push origin master'
alias gs='git status -sb'
alias go='git checkout'
alias gm='git checkout master'
alias ga='git add'
alias gb='git branch'
alias gd='git diff --word-diff=color'
alias gf='git fetch'
alias gl='git log --oneline --decorate'
alias gll='git log -U1 --word-diff=color' # -U1: 1 line of context (-p implied)

git checkout
------------
git checkout -b topic master
git branch topic master && git checkout topic
    create topic from local master and check it out

git push
--------
git push origin serverfix
git push origin serverfix:serverfix
git push origin refs/heads/serverfix:refs/heads/serverfix
                               local:remote

After a git fetch that brings origin/serverfix (upstream or @{u}),
is git checkout -b serverfix origin/serverfix equivalent to
   git checkout --track origin/serverfix
   git checkout serverfix

Those create a tracking branch => git pull knows what server/branch to pull from

Set current branch to track:
    git branch -u origin/serverfix

Submodules
----------
Add
git submodule add git@github.com:tpope/vim-commentary.git bundle/vim-commentary

Delete
git submodule deinit bundle/nerdcommenter
git rm bundle/nerdcommenter
rm -rf .git/modules/bundle/nerdcommenter

Update:
all
git submodule foreach git pull origin master

only one
cd $my_submodule && git pull # OR
git -C my_submodule pull

Rename:
1. Delete the relevant section from the .gitmodules file
2. git add .gitmodules
3. Delete the relevant section from .git/config
4. git rm --cached bundle/_my/\* (no trailing slash)
5. rm -rf .git/modules/bundle/_my/*
6. rm -rf bundle/_my/
7. git submodule add git@github.com:kurkale6ka/vim-swap.git .bundle/swap
