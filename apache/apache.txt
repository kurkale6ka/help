Apache
------

configuration files:
* httpd.conf
*   -> Include directives
* .htaccess (if no access to httpd.conf)

configuration:
<section>
  directives
</section>

http://www.example.com/work/ - serve index.html
                      |
                      +- DocumentRoot (/var/www/html)

Virtual hosts:

1. multiple hosts resolve to the same IP, both vhost sections match, differentiate on servername
   www.example.com -> <VirtualHost *:80> ServerName www.example.com
   hi.travel.com   -> <VirtualHost *:80> ServerName hi.travel.com

2. with ssl, not using sni, the Host header isn't available for matching against a ServerName. In that case we could set it for further processing:
   www.example.com -> <VirtualHost 1.1.1.1:443> RequestHeader set Host www.example.com
   hi.travel.com   -> <VirtualHost 2.2.2.2:443> RequestHeader set Host hi.travel.com

For a single domain with alternative names, a multi domain certificate could be used instead of SNI.

Location:
<Location "/private">  -> match /private, /private/, /private/text, ...
<Location "/private/"> -> match           /private/, /private/text, ...

In <Directory>, rewrite rules match against a relative path, the dir one + slash being stripped, so use:
RewriteRule "^$" "/moodle" # vs / -> /moodle

Modules {{{1

Modules can be statically compiled into the httpd binary when the server is
built. Alternatively, modules can be compiled as Dynamic Shared Objects (DSOs)
that exist separately from the main httpd binary file. You must use a
LoadModule directive in httpd.conf to tell Apache to activate a module.

Options {{{1

The Options directive controls which server features are available in a
particular directory

Parent:
<Directory /web/docs>
Options Indexes FollowSymLinks
</Directory>

Not merging with parent:
# No -/+ => only Includes will be set for /web/docs/spec
<Directory /web/docs/spec>
Options Includes
</Directory>

Merging with parent:
# FollowSymLinks and Includes are set for /web/docs/spec
<Directory /web/docs/spec>
Options +Includes -Indexes
</Directory>

Alias {{{1

Alias /docs /var/web (server config, virtual host)
http://www.example.com/docs/dir/file.html will be served from /var/web/dir/file.html
                                                           vs /DocumentRoot/docs/dir/file.html

This is to allow web access to parts of the filesystem that are not strictly
underneath the DocumentRoot.
Alternative: use symlinks, but directory options must include FollowSymLinks

Virtual Hosts {{{1

IP-Based Virtual Host:
The physical server should have as many NICs as served websites

Name-Based Virtual Host:
Apache looks for the hostname in the HTTP header, and depending on the
hostname, it serves different websites. You need only one ip-address on the
physical server; but, you update the DNS with multiple website names pointing
to the same ip-address.

IP on which the server will receive requests for the name-based virtual hosts:
NameVirtualHost 111.22.33.44:80 - listen on this NIC
NameVirtualHost *:80            - listen on all NICs (not reliable!?)

<VirtualHost *:80>
ServerName server.domain.com   # the vhost name
ServerAlias server2.domain.com # an alias for that name (analogue to /etc/hosts)
                               # CNAME set in DNS must exist
</VirtualHost>

Note on Name-Based Virtual Hosts and SSL:
It is impossible to host more than one SSL virtual host on the same IP address
and port. This is because Apache needs to know the name of the host in order to
choose the correct certificate to setup the encryption layer. But the name of
the host being requested is contained only in the HTTP request headers, which
are part of the encrypted content. It is therefore not available until after the
encryption is already negotiated. This means that the correct certificate cannot
be selected, and clients will receive certificate mismatch warnings and be
vulnerable to man-in-the-middle attacks.

Allow, Deny {{{1

mod_authz_host

All Allow and Deny directives are processed, unlike a typical firewall, where
only the first match is used. The last match is effective (also unlike a
typical firewall).

Match                   | Allow,Deny result                   | Deny,Allow result
------------------------+-------------------------------------+-------------------------------------
Match Allow only        | Request allowed                     | Request allowed
Match Deny only         | Request denied                      | Request denied
No match                | Default to second directive: Denied | Default to second directive: Allowed
Match both Allow & Deny | Final match controls: Denied        | Final match controls: Allowed

<Directory /www>
Order Allow,Deny (A,D means D is the default; D,A means A is)
Allow from apache.org
Deny from foo.apache.org
</Directory>

.htaccess {{{1

* Any directive that you can include in a .htaccess file is better set in a
  Directory block (in httpd.conf), as it will have the same effect with better
  performance.

* The .htaccess file is placed in a particular document directory, and the
  directives apply to that directory, and all subdirectories thereof.

* What you can put in these files is determined by the AllowOverride directive.

Proxy {{{1

A proxy server acts on behalf of another machine - client or server

Forward proxy - ProxyRequests
-----------------------------

A forward proxy provides proxy services to clients

client1                                  +--------+
client2 --> FORWARD PROXY -- firewall -- |internet| -- target server
clientn                                  +--------+

From the point of view of the server, it is the proxy server that issued the
request, not the client. Depending on the forward proxy's settings, a request
can be allowed or denied. The proxy can serve as a single point of access and
control. It is primarily aimed at enforcing security on client computers in your
internal network.

Notes:
* the client must be specially configured to use the forward proxy
* a typical usage of a forward proxy is to provide Internet access to internal
  clients that are otherwise restricted by a firewall.
* because forward proxies allow clients to access arbitrary sites and to hide
  their true origin, it is essential that only authorized clients can access the
  proxy before activating it.

Reverse proxy (gateway) - ProxyPass
-----------------------------------

A reverse proxy accepts requests from external clients on behalf of servers
stationed behind it.

           +--------+                                 server1
client --> |internet| -- firewall -- REVERSE PROXY -- server2
           +--------+                                 servern

To the client in our example, it is the reverse proxy that is providing
services. Thus, a reverse proxy hides the identities of servers, whereas a
forward proxy hides the identities of clients. Just like forward proxy servers,
reverse proxies also provide a single point of access and control.

Reverse proxies can be used for:
* load balancing
* caching for a slower back-end server
* bring several servers into the same URL space
