                                    Ansible

ansible hosts -mmodule -aarguments options
                  \
                   command (default)
                   shell if you need |s and >s

The command and shell modules are the only modules that just take a list of
arguments and don’t use the key=value form.

hosts can be: qa1, *.example.com, group1:group2, ~regex...

Inventory:
/etc/ansible/hosts
[qa]
qa[1:5] ansible_user=mitko # host variable

[qa:vars] # group variables

[new_group:children]
qa
other_child

Variables outside of the inventory in YAML files:
/etc/ansible/group_vars/group1
/etc/ansible/group_vars/group2
/etc/ansible/host_vars/host1

Also with subdirs:
/etc/ansible/group_vars/group1/db_settings
/etc/ansible/group_vars/group1/cluster_settings

Useful examples:
ansible <hosts> -m copy -a 'src=/etc/hosts dest=/tmp/hosts'
ansible <hosts> -m yum -a 'name=vim-enhanced state=latest'
ansible <hosts> -m service -a 'name=httpd state=restarted'

Facts:
ansible <hosts> -m setup

YAML:
---
- martin:
    name: Martin D'vloper # dictionary
    job: Developer
    skills:
      - python
      - perl
      - pascal
- tabitha:
    name: Tabitha Bitumen
    job: Developer
    skills:               # a dictionary with a list value
      - lisp
      - fortran
      - erlang

# indentation ignored for both | and > below
include_newlines: |
            exactly as you see
            will appear these three
            lines of poetry

ignore_newlines: >
            this is really a
            single line of text
            despite appearances

# short forms
martin: {name: Martin D'vloper, job: Developer, skill: Elite}
fruits: ['Apple', 'Orange', 'Strawberry', 'Mango']

# gotcha
foo: "{{ variable }}" # quote or ansible will think it's a dictionary
...

Playbooks:
ansible-playbook playbook.yml options

---
- hosts: webservers # play 1
  remote_user: root

  tasks: # modules (idempotent)
  - name: ensure apache is at the latest version
    yum: name=httpd state=latest # action: yum name=httpd state=latest is deprecated
    # or the equivalent:
    # yum:
    #   name: httpd
    #   state: latest
  - name: write the apache config file
    template: src=/srv/httpd.j2 dest=/etc/httpd.conf
    notify: # only if /etc/httpd.conf above has changed
      - restart memcached # handler name
      - restart apache
    # or notify: "restart web services"

  handlers:
    - name: restart memcached
      service: name=memcached state=restarted
      listen: "restart web services"
    - name: restart apache
      service: name=apache state=restarted
      listen: "restart web services"

- hosts: databases  # play 2
  remote_user: root

  tasks:
  - name: ensure postgresql is at the latest version
    yum: name=postgresql state=latest
  - name: ensure that postgresql is started
    service: name=postgresql state=started

Roles:
Roles are similar to modules autoloading in puppet
Roles are just automation around ‘include’ directives

ex: auto include roles/*/tasks/main.yml (equiv to init.pp in puppet land)
    vs - include: tasks/foo.yml

ex 2:
---
- hosts: webservers
  roles:
    - common
    - webservers

Autoload structure:
roles/
  webservers/
    files/
    templates/
    tasks/
    handlers/
    vars/
    defaults/
    meta/

~/.ansible.cfg:
[defaults]
forks = 50

[ssh_connection]
# ProxyCommand related:
# fix the unreachable issue related to the sftp subsystem not being enabled
scp_if_ssh = True
