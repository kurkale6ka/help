Single input source

parallel echo ::: arg1 arg2 arg3
parallel echo :::: file

Multiple input sources

parallel echo ::: args... ::: args...
parallel echo :::: file1 file2
parallel -afile1 -afile2 echo

STDIN

cmd | parallel echo
cat file | parallel echo :::: - file2 ::: arg1 arg2
parallel --xargs rm < file # safe on wordsplitting

Combinations

parallel echo ::: A B ::: D E
A D
A E
B D
B E

parallel echo ::: A B C :::+ D E F # or use --link
A D
B E
C F

Replacement strings (-I to change {})

parallel echo {.}  ::: A/B.C -> A/B   # rm ext,                 also: {1.}  and: {=1 s/// =}
parallel echo {/}  ::: A/B.C ->   B.C # rm path   (basename),   also: {1/}
parallel echo {//} ::: A/B.C -> A     # keep path (parent dir), also: {1//}
parallel echo {/.} ::: A/B.C ->   B   # rm ext & path,          also: {1/.}

--plus

      A/B  C
 {} = {.}.{+.} # the 'plus' variant is the opposite of {.}

{..} and {...} # remove 2/3 extensions

     {%string} # remove str from end # see bash counterparts

Positional replacement strings

parallel echo {1} and {2} ::: A B ::: C D
A and C
A and D
B and C
B and D

Perl expression replacement string

parallel echo '{= s/\.gz$//; s/\.tar$// =}' ::: foo.tar.gz -> foo
parallel echo '{= skip if /3/ =}' ::: {1..5}

args are inside @arg, so '{= ... $arg[0] ... =}'

'{= $_=Q($_) =}' # shell quote

Other options

--tag: prefix output with the arguments

parallel --tagstring {/}: echo ::: A B
A:      A
B:      B

--xargs, -m, -X: process args in bulk

parallel --xargs echo hello_{} ::: a b c ::: c d f
hello_a c a d a f b c b d b f c c c d c f

parallel -m echo hello_{} ::: a b c ::: c d f
hello_a c a d a f
hello_b c b d b f
hello_c c c d c f

parallel -X echo hello_{} ::: a b c ::: c d f
hello_a hello_c hello_a hello_d hello_a hello_f
hello_b hello_c hello_b hello_d hello_b hello_f
hello_c hello_c hello_c hello_d hello_c hello_f

-d: arg delim

find ... -print0 | parallel -0 echo # short for -d'\0'

--no-run-if-empty: skip empty lines

Notes

No cmd (implies bash) => treat args as cmds
parallel ::: ls 'echo hi' pwd

SSH

parallel --nonall --tag -S host1,host2 uname -a
