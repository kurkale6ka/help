Apache
------

Modules {{{1

Modules can be statically compiled into the httpd binary when the server is
built. Alternatively, modules can be compiled as Dynamic Shared Objects (DSOs)
that exist separately from the main httpd binary file. You must use a
LoadModule directive in httpd.conf to tell Apache to activate a module.

Optional in most configurations:
--------------------------------

# Server Side Includes:
# simple server parsing of requested files (much simpler than PHP for instance)
# Ex: include a file: <!-- #include virtual="/path/to/file" -->
LoadModule include_module modules/mod_include.so

# WebDAV (Web Distributed Authoring and Versioning) is a method for allowing
# remote access to local folders via an HTTP-based web browser. The WebDAV
# protocol makes the Web a readable and writable medium.
# Alternatives to WebDAV: ftp, ssh
LoadModule dav_module modules/mod_dav.so
LoadModule dav_fs_module modules/mod_dav_fs.so

# Allows user-specific directories to be accessed using
# http://example.com/~user/
LoadModule userdir_module modules/mod_userdir.so

# Use version specific apache features
# <IfVersion >= 2.2> ...
LoadModule version_module modules/mod_version.so

# Personalized directory index (index.html) Vs a server generated one
# <Directory> Options Indexes ...
# Note: doesn't need Options +Indexes, related: mod_autoindex
LoadModule dir_module modules/mod_dir.so

# Clickstream logging of user activity on a site (previously mod_cookies).
# Clickstream is the recording of user clicks while browsing
LoadModule usertrack_module modules/mod_usertrack.so

# This module provides the logging of input and output number of bytes
# received/sent per request
LoadModule logio_module modules/mod_logio.so

# Attempts to correct mistaken URLs that users might have entered by ignoring
# capitalization and by allowing up to one misspelling
LoadModule speling_module modules/mod_speling.so

# Allows the use of external UNIX-style filters
# (programs reading from STDIN and writing to STDOUT)
LoadModule ext_filter_module modules/mod_ext_filter.so

# Setting of the Expires HTTP header in server responses. If cached, the
# document may be fetched from the cache rather than from the source until this
# time has passed.
LoadModule expires_module modules/mod_expires.so

# Provides the DEFLATE output filter that allows output from your server to be
# compressed before being sent to the client over the network.
LoadModule deflate_module modules/mod_deflate.so

# This module provides for executing CGI scripts based:
#    on mime type      - Action image/gif /cgi-bin/images.cgi
#    or request method - Script PUT /~bob/put.cgi
LoadModule actions_module modules/mod_actions.so

# Content cache using URIs for keys
# Can be used to circumvent Allow/Deny directives. Shouldn't be enabled for any
# content to which you wish to limit access by hostname, address or env var.
# Requires: mod_disk_cache and/or mod_mem_cache
LoadModule cache_module modules/mod_cache.so
LoadModule disk_cache_module modules/mod_disk_cache.so
LoadModule mem_cache_module modules/mod_mem_cache.so

# Caches a static list of files in memory
# Should be used with care. You can easily create a broken site using it
LoadModule file_cache_module modules/mod_file_cache.so

# HTTP Basic/Digest Authentication (user/password)
# Note: both methods are insecure and should be used with mod_ssl
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule auth_digest_module modules/mod_auth_digest.so

# Auth(Basic/Digest)Provider - user/password database to use
#    mod_authn_dbm
#    mod_authn_file
#       htpasswd [ -c ] [ -m ] [ -D ] passwdfile username
#       htdigest [ -c ] passwdfile realm username
#    mod_authn_dbd
#    mod_authnz_ldap
# Ex:
#    <Location /secure>
#       AuthType basic
#       AuthBasicProvider dbm
#       ...
LoadModule authn_dbm_module modules/mod_authn_dbm.so
LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authn_dbd_module modules/mod_authn_dbd.so
LoadModule ldap_module modules/mod_ldap.so
LoadModule authnz_ldap_module modules/mod_authnz_ldap.so

# Allows "anonymous" user access to authenticated areas. Allows user tracking
# and customization according to a user profile while still keeping the site
# open for 'unregistered' users
LoadModule authn_anon_module modules/mod_authn_anon.so

# This module is designed to be the fallback module, if you don't have
# configured an authentication module. It rejects any supplied credentials
LoadModule authn_default_module modules/mod_authn_default.so

# Ability to create extended authentication providers based on actual providers
LoadModule authn_alias_module modules/mod_authn_alias.so

# Todo: explain these:
LoadModule vhost_alias_module modules/mod_vhost_alias.so

LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
LoadModule proxy_ftp_module modules/mod_proxy_ftp.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_connect_module modules/mod_proxy_connect.so

Note: use the following substitute command in Vim to disable most unneeded modules

clush -aB 'grep -hr "Proxy\|\[.*P.*\]" /etc/httpd/conf/httpd.conf /etc/httpd/conf.d/ /etc/httpd/vhosts.d/ | grep -vE "^\s*#"'

:s/\v^\ze\s*LoadModule\s+%(include|dav.*|%(user)?dir|version|usertrack|logio|speling|ext_filter|expires|deflate|actions|proxy_balancer|%(disk_|mem_|file_)*cache|%(authnz_)?ldap|authz_%(groupfile|dbm|default)|auth_%(basic|digest)|authn_.*)_module/#/c

Usually needed:
---------------

LoadModule cgi_module modules/mod_cgi.so
LoadModule alias_module modules/mod_alias.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule mime_module modules/mod_mime.so

# Determines the MIME type of a file by looking at a few bytes of its contents.
# It is intended as a "second line of defense" for cases that mod_mime can't resolve.
LoadModule mime_magic_module modules/mod_mime_magic.so

# Logging of the requests made to the server
# Provides: CustomLog
LoadModule log_config_module modules/mod_log_config.so

# suexec is used by the Apache HTTP Server to switch to another user before
# executing CGI programs
LoadModule suexec_module modules/mod_suexec.so

# Setting of environment variables based on characteristics of the request
# Ex: BrowserMatch ^Mozilla netscape             - set the netscape   var
#     SetEnvIfNoCase User-Agent Robot is_a_robot - set the is_a_robot var
LoadModule setenvif_module modules/mod_setenvif.so

# Internal environment variables used by various Apache modules
# Variables can either be passed from the OS or created internally
# Ex: PassEnv LD_LIBRARY_PATH
#     SetEnv SPECIAL_PATH /foo/bin
LoadModule env_module modules/mod_env.so

# Allows a server administrator to find out how well their server is performing
LoadModule status_module modules/mod_status.so

# Provides a comprehensive overview of the server configuration
LoadModule info_module modules/mod_info.so

# Provides directives to control and modify HTTP request and response headers
LoadModule headers_module modules/mod_headers.so

# Generates directory indexes, automatically, similar to the Unix ls command
# Note: needs Options +Indexes, related: mod_dir
LoadModule autoindex_module modules/mod_autoindex.so

# Provides for content negotiation: selection of the document that best matches
# the clients capabilities, from one of several available documents
# Ex: LanguagePriority - precedence of language variants for cases where the
#                        client does not express a preference
LoadModule negotiation_module modules/mod_negotiation.so

# Authorizations based on host - Allow/Deny
#                         user
#                         owner
#                         group
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule authz_owner_module modules/mod_authz_owner.so

# AuthGroupFile/AuthDBMGroupFile directive sets the name of a textual/DBM file
# containing the list of user groups for user authorization
LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
LoadModule authz_dbm_module modules/mod_authz_dbm.so

# This module is designed to be the fallback module, if you don't have
# configured an authorization module. It rejects any authorization request.
LoadModule authz_default_module modules/mod_authz_default.so

Options {{{1

The Options directive controls which server features are available in a
particular directory

Parent:
<Directory /web/docs>
Options Indexes FollowSymLinks
</Directory>

Not merging with parent:
# No -/+ => only Includes will be set for /web/docs/spec
<Directory /web/docs/spec>
Options Includes
</Directory>

Merging with parent:
# FollowSymLinks and Includes are set for /web/docs/spec
<Directory /web/docs/spec>
Options +Includes -Indexes
</Directory>

Alias {{{1

Alias /docs /var/web (server config, virtual host)
http://www.example.com/docs/dir/file.html will be served from /var/web/dir/file.html
                                                           vs /DocumentRoot/docs/dir/file.html

This is to allow web access to parts of the filesystem that are not strictly
underneath the DocumentRoot.
Alternative: use symlinks, but directory options must include FollowSymLinks

Virtual Hosts {{{1

IP-Based Virtual Host:
The physical server should have as many NICs as served websites

Name-Based Virtual Host:
Apache looks for the hostname in the HTTP header, and depending on the
hostname, it serves different websites. You need only one ip-address on the
physical server; but, you update the DNS with multiple website names pointing
to the same ip-address.

IP on which the server will receive requests for the name-based virtual hosts:
NameVirtualHost 111.22.33.44:80 - listen on this NIC
NameVirtualHost *:80            - listen on all NICs (not reliable!?)

<VirtualHost *:80>
ServerName server.domain.com   # the vhost name
ServerAlias server2.domain.com # an alias for that name (analogue to /etc/hosts)
                               # CNAME set in DNS must exist
</VirtualHost>

Note on Name-Based Virtual Hosts and SSL:
It is impossible to host more than one SSL virtual host on the same IP address
and port. This is because Apache needs to know the name of the host in order to
choose the correct certificate to setup the encryption layer. But the name of
the host being requested is contained only in the HTTP request headers, which
are part of the encrypted content. It is therefore not available until after the
encryption is already negotiated. This means that the correct certificate cannot
be selected, and clients will receive certificate mismatch warnings and be
vulnerable to man-in-the-middle attacks.

Allow, Deny {{{1

mod_authz_host

All Allow and Deny directives are processed, unlike a typical firewall, where
only the first match is used. The last match is effective (also unlike a
typical firewall).

Match                   | Allow,Deny result                   | Deny,Allow result
------------------------+-------------------------------------+-------------------------------------
Match Allow only        | Request allowed                     | Request allowed
Match Deny only         | Request denied                      | Request denied
No match                | Default to second directive: Denied | Default to second directive: Allowed
Match both Allow & Deny | Final match controls: Denied        | Final match controls: Allowed

<Directory /www>
Order Allow,Deny (A,D means D is the default; D,A means A is)
Allow from apache.org
Deny from foo.apache.org
</Directory>

.htaccess {{{1

* Any directive that you can include in a .htaccess file is better set in a
  Directory block (in httpd.conf), as it will have the same effect with better
  performance.

* The .htaccess file is placed in a particular document directory, and the
  directives apply to that directory, and all subdirectories thereof.

* What you can put in these files is determined by the AllowOverride directive.

Proxy {{{1

A proxy server acts on behalf of another machine - client or server

Forward proxy - ProxyRequests
-----------------------------

A forward proxy provides proxy services to clients

client1                                  +--------+
client2 --> FORWARD PROXY -- firewall -- |internet| -- target server
clientn                                  +--------+

From the point of view of the server, it is the proxy server that issued the
request, not the client. Depending on the forward proxy's settings, a request
can be allowed or denied. The proxy can serve as a single point of access and
control. It is primarily aimed at enforcing security on client computers in your
internal network.

Notes:
* the client must be specially configured to use the forward proxy
* a typical usage of a forward proxy is to provide Internet access to internal
  clients that are otherwise restricted by a firewall.
* because forward proxies allow clients to access arbitrary sites and to hide
  their true origin, it is essential that only authorized clients can access the
  proxy before activating it.

Reverse proxy (gateway) - ProxyPass
-----------------------------------

A reverse proxy accepts requests from external clients on behalf of servers
stationed behind it.

           +--------+                                 server1
client --> |internet| -- firewall -- REVERSE PROXY -- server2
           +--------+                                 servern

To the client in our example, it is the reverse proxy that is providing
services. Thus, a reverse proxy hides the identities of servers, whereas a
forward proxy hides the identities of clients. Just like forward proxy servers,
reverse proxies also provide a single point of access and control.

Reverse proxies can be used for:
* load balancing
* caching for a slower back-end server
* bring several servers into the same URL space
