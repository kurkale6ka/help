                              TCP Port forwarding

Local forwarding
----------------
access outside proxying via gateway

             8080:remote:80 gateway # ANYONE connecting to my pc:8080 are forwarded to remote via gateway (4 hops)
   localhost:8080:remote:80 gateway #          services on my pc:8080 are forwarded to remote via gateway
localhost:8080:localhost:80 gateway #          services on my pc:8080 are forwarded to            gateway

Remote forwarding: my pc is the gateway
---------------------------------------
access intranet from outside via my pc (LAN backdoor)

      2222:beyond:22 remote #        ANYONE on remote:2222 are forwarded beyond via my pc, GatewayPorts yes             on remote (4 hops)
   2222:localhost:22 remote #        ANYONE on remote:2222 are forwarded         to my pc, GatewayPorts yes             on remote
   2222:localhost:22 remote #      services on remote:2222 are forwarded         to my pc                                         (default)
IP:2222:localhost:22 remote # IP connecting to remote:2222 are forwarded         to my pc, GatewayPorts clientspecified on remote

also needed: AllowTcpForwarding

ssh -fNL
     |+- do not execute a remote command
     +- go to background (exiting the terminal won't close the tunnel)

local forwarding example:
our LAN policy prevents access to imgur.com but our jumphost(gateway) can connect:

# locally
ssh -fNL 3000:imgur.com:3000 gateway # localhost:3000 -> gateway -> imgur.com:3000
ssh -fNL 3000:localhost:3000 gateway # localhost:3000 -> gateway:3000
                   \___________/

ask for port 3000 locally, get port 3000 on the remote

in ~/.ssh/config:
host gateway
   LocalForward 3000 imgur.com:3000 # use it with: ssh -fN gateway

use non privileged ports locally:
ssh -fNL 1443:10.1.0.200:443 gateway

Connect via https://localhost:1443

Secure remote (reverse tunnel) desktop assistance
-------------------------------------------------

     gateway  localhost
        |         |
ssh -fNR 5901:localhost:5900 gateway # user, no firewall openings needed
ssh -fNL 5902:localhost:5901 gateway # support (5902 was used vs 5900 to avoid interference with a local VNC server)
        |         |
    localhost  gateway

# then support can connect via:
            Screen Sharing - localhost:5902 # Darwin
vncviewer -SecurityTypes ??? localhost:5902 # Linux

# ^ ask for port 5902 locally, get port 5900 on the user machine.
# a VNC server must listen on port 5900 on the user machine,
# 'Screen Sharing' listens on that port by default.

Dynamic
-------
Forward all ports: "a poor man's VPN"

ssh -fND 4567 gateway # <- the ssh process BECOMES the socks server.

ff request -> (proxy via the local socks server) -> (tunnel to) gateway
                \
                 point to it with - localhost:4567
                 blank all other proxy fields!

It's as if our requests were originating from the gateway.
Connect via https://gateway (or any IP accessible from the gateway)
        NOT https://localhost:4567

why not use ssh -L?
If you need to access https://company.com, https://company.com:1234 and other
ports, you would need to setup as many local tunnels vs a single dynamic one.
