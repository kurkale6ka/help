                              TCP Port forwarding

Local
-----
ssh -fNL [localhost:]port:remotehost:port gateway
     |+- do not execute a remote command
     +- go to background (exiting the terminal won't close the tunnel)

example:
our LAN policy prevents access to imgur.com but our jumphost(gateway) can connect:

# locally
ssh -fNL 3000:imgur.com:3000 gateway # localhost:3000 -> gateway -> imgur.com:3000
ssh -fNL 3000:localhost:3000 gateway # localhost:3000 -> gateway:3000
                   \___________/

ask for port 3000 locally, get port 3000 on the remote

in ~/.ssh/config:
host gateway
   LocalForward 3000 imgur.com:3000 # use it with: ssh -fN gateway

use non privileged ports locally:
ssh -fNL 1443:10.1.0.200:443 gateway

Connect via https://localhost:1443

Remote (reverse tunnel), aka secure remote desktop
--------------------------------------------------
In the following example, the support person connects via vnc://gateway:5900,
they might need local port forwarding on their side

# setup by user on their host (no firewall openings needed)
ssh -fNR 5900:localhost:5900 gateway # locally
                  \
                   user (the implied localhost before 5900 is the gateway!)

ask for port 5900 on the gateway, get port 5900 on the user machine

Dynamic
-------
Forward all ports: "a poor man's VPN"

ssh -fND 4567 gateway # <- the ssh process BECOMES the socks server.

ff request -> (proxy via the local socks server) -> (tunnel to) gateway
                \
                 point to it with - localhost:4567
                 blank all other proxy fields!

It's as if our requests were originating from the gateway.
Connect via https://gateway (or any IP accessible from the gateway)
        NOT https://localhost:4567

why not use ssh -L?
If you need to access https://company.com, https://company.com:1234 and other
ports, you would need to setup as many local tunnels vs a single dynamic one.
